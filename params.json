{
  "name": "p5js",
  "tagline": "",
  "body": "# Using code to make interactive art\r\n_Brian Mueller_\r\n\r\n---\r\n## Introduction\r\n* What is p5js?\r\n  * **p5.js** is a _JavaScript_ library modeled after **Processing**, a _Java_ library\r\n  * all _JavaScript_ syntax rules apply\r\n* How do I use p5js?\r\n  * It runs nicely in an HTML page.  Just embed it like you would with normal javascript!\r\n* What is p5js used for?\r\n  * Animations\r\n  * Games\r\n  * Mockups\r\n  * Much more!\r\n\r\n---\r\n## Getting Started\r\n* **template**: use [tiny.cc/p5template](https://gist.githubusercontent.com/bmuellerhstat/bd0ca8ce27961f9c264d/raw/5bdc81a80b9ff726949078905b9c0d64b528215b/p5-template.html) to get started\r\n * using offline? make sure you download the [p5.js](http://p5js.org/download/) file\r\n * you can also fork/clone this repo\r\n* IDEs\r\n * **[Atom](http://atom.io/)** (live preview)\r\n * **[Cloud9](http://c9.io/)** (cloud based, semi-live preview)\r\n * **[Nitrous](http://www.nitrous.io/)** (requires using `python -m SimpleHTTPServer -p 3000`)\r\n* sandbox: **[jsbin.com](http://jsbin.com/)**\r\n* native IDE: [p5js](http://p5js.org/download/) > editor  \r\n\r\n---\r\n## Understanding the Structure\r\n* `function setup(){}` is called **once** on load  \r\n* `function draw(){}` is called **60 times per second**\r\n   * you can change this with `frameRate(#)`\r\n* `createCanvas(w,h)` sets the size of your sketch (px)\r\n * optional: you can use `displayWidth` and `displayHeight` (or `windowWidth` and `windowHeight`)\r\n* the top-left corner is `(0,0)`\r\n  * `x` increases as you go **right**\r\n  * `y` increases as you go **down**\r\n\r\n---\r\n## Shapes\r\n* the 4 basic shapes\r\n * `point(x,y)`\r\n * `line(x1,y1,x2,y2)`\r\n * `rect(x,y,w,h)`\r\n   * **draws from the top-left corner**\r\n    * default \"mode\" is `rectMode(CORNER)`\r\n    * `rectMode(CENTER)` **draws from the center**\r\n    * `rectMode(CORNERS)` uses diagonal corners: `rect(x1,y1,x2,y2)`\r\n    * see [documentation](http://p5js.org/reference/#/p5/rect) for rounded edges\r\n * `ellipse(x,y,w,h)`\r\n   * **draws from the center**\r\n    * default \"mode\" is `ellipseMode(CENTER)`\r\n    * can also use `ellipseMode(CORNER)` and `ellipseMode(CORNERS)` _(similar to_ `rectMode()`_)_\r\n* other shapes\r\n * `triangle`, `quad`rilateral, etc. (see [documentation](http://p5js.org/reference/))\r\n\r\n---\r\n## Color\r\n* **color theory**\r\n * min = `0` _(none of that color)_\r\n * max = `255` _(100% of that color)_\r\n * three values represent RGB values, i.e. `(255,0,0)` means red _(no green or blue)_\r\n * one value represents grayscale (all RGB values are equal `(150) = (150,150,150)`\r\n * `0` = black, `255` = white\r\n* **color commands**: the setting will be applied to _all future shapes_ until the setting is changed again\r\n * `fill(R,G,B,[A])` sets the interior color\r\n   * `[A]` is an optional \"alpha\" (opacity) argument\r\n * `stroke(R,G,B,[A])` sets the outline color\r\n * `strokeWeight(#)` sets the outline thickness (px)\r\n * `background(R,G,B)` sets the color of the background\r\n   * use inside `function setup(){}` to run once\r\n   * use inside `function draw(){}` to \"wipe\" the background for each frame\r\n\r\n---\r\n## Variables\r\n* **global** variables must be declared _outside_ of all functions\r\n * their scope is visible inside & outside all functions\r\n* **local** variables are declared _inside_ a function\r\n * their scope is limited to that specific function\r\n* **system** variables are reserved keywords for values such as the `width` and `height` of the canvas\r\n\r\n---\r\n## Interaction\r\n* `mouseX` and `mouseY` are system variables that contain the coordinates of the user's mouse\r\n* `function mousePressed(){}` is called when the user clicks the mouse\r\n* `function keyPressed(){}` is called when the user presses a key\r\n\r\nRead more in the [documentation](http://p5js.org/reference/) under **Events** (including mobile: `touchX`, `touchY`, etc).\r\n\r\n---\r\n## Conditionals\r\n```javascript\r\nif (condition){\r\n  // code\r\n} else if (condition){\r\n  // code\r\n}\r\nelse {\r\n  // default\r\n}\r\n```\r\n\r\n---\r\n## Loops\r\n```javascript\r\nwhile (condition) {\r\n  // code\r\n}\r\n```\r\n```javascript\r\ndo {\r\n  // code\r\n} while (condition);\r\n```\r\n```javascript\r\nfor (var i = 0; i < num; i++) {\r\n  // code\r\n}\r\n```\r\n---\r\n## Functions\r\n```javascript\r\n// defining your function\r\nfunction myFunction(optional parameters){\r\n  // code\r\n}\r\n\r\n// calling your function\r\nmyFunction(arguments);\r\n```\r\n\r\n---\r\n## Arrays\r\n```javascript\r\nvar arrayName = [item1, item2, ...];\r\narrayName[1]; // returns item2\r\n```\r\n\r\n---\r\n## Examples\r\n* [Random Circles](random-circles.html)\r\n* [Ghost](ghost.html)\r\n* [Flower (relative position)](flower-relative-position.html)\r\n* [Flower dilation](flower-dilation.html)\r\n* [Interaction & Loops](interaction-loop.html)\r\n* [Interaction & Graffiti](interaction-graffiti.html)\r\n* [Circle Orb](circle-orb.html)\r\n* [Kuku Kube](http://brianmueller.github.io/kuku-kube/) [[mobile](http://brianmueller.github.io/kuku-kube/mobile)]\r\n* [Pong](pong.html)\r\n\r\n---\r\n## Extra\r\n* [GitHub Pages Tutorial](http://bmuellerhstat.github.io/gh-pages-tutorial/)\r\n  * For mirroring your gh-pages and master branches\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}